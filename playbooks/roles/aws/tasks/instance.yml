---
- name: "Query for existing running instance: {{ instance.name }}"
  ec2_instance_info:
    region: "{{ instance.region }}"
    filters:
      "tag:Name": "{{ instance.name }}"
      instance-state-name: [ "running", "pending" ]
  register: running_instance

- name: "Create EC2 instance: {{ instance.name }}"
  ec2_instance:
    region: "{{ instance.region }}"
    name: "{{ instance.name }}"
    instance_ids: "{{ instance.name }}"
    instance_type: "{{ instance.type | default('t2.micro') }}"
    vpc_subnet_id: "{{ vpc_result[instance.region].subnets[instance.subnet].subnet_id }}"
    key_name: "{{ ssh_key_name }}"
    security_group: "{{ vpc_result[instance.region].name }}-{{ instance.role }}"
    tags: "{{ resource_tags | combine( { 'Role': instance.role, 'Site': instance.site, 'Region': instance.region } ) }}"
    image_id: "{{ latest_ami[instance.region] }}"
    termination_protection: False
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 20
          delete_on_termination: true
  register: new_instance
  retries: 3
  delay: 5
  when: running_instance.instances | length == 0

- name: "Query for running instance: {{ instance.name }}"
  ec2_instance_info:
    region: "{{ instance.region }}"
    filters:
      "tag:Name": "{{ instance.name }}"
      instance-state-name: [ "running", "pending" ]
  retries: 10
  delay: 5
  until: running_instance.instances[0].private_ip_address is defined and (running_instance.instances[0].public_ip_address is defined and running_instance.instances[0].state.name == 'running' or instance.role != 'loadbalancer')
  register: running_instance

- set_fact:
    private_ip: "{{ running_instance.instances[0].private_ip_address }}"
    public_ip: "{{ running_instance.instances[0].public_ip_address | default('') }}"
    vm_result: "{{ vm_result + [{
      'name': instance.name,
      'site': instance.site,
      'region': instance.region,
      'role': instance.role,
      'subnet': instance.subnet,
      'private_ip': running_instance.instances[0].private_ip_address,
      'public_ip': running_instance.instances[0].public_ip_address | default(''),
      'az': running_instance.instances[0].placement.availability_zone,
      'instance_id': running_instance.instances[0].instance_id }] }}"

- name: Allocate a new elastic IP for loadbalancer
  community.aws.ec2_eip:
    device_id: "{{ running_instance.instances[0].instance_id }}"
    region: "{{ instance.region }}"
    state: present
    tags: "{{ resource_tags }}"
    reuse_existing_ip_allowed: true
    release_on_disassociation: true
    in_vpc: True
  register: instance_eip
  when: "instance.role == 'loadbalancer'"

- name: "Add instance A record {{ instance.name }}.{{ privatednszone }} with private IP {{ private_ip }}"
  route53:
    state: present
    zone: "{{ privatednszone }}"
    record: "{{ instance.name }}.{{ privatednszone }}"
    type: A
    ttl: "{{ ttl }}"
    value: "{{ private_ip }}"
    overwrite: yes
  retries: 3
  delay: 5

- name: "Add latency A record for {{ relative_name }}.{{ dns_name }} with public IP {{ instance_eip.public_ip }}"
  route53:
    state: present
    identifier: "{{ instance.region }}-{{ instance.name }}"
    region: "{{ instance.region }}"
    zone: "{{ dns_name }}"
    record: "{{ relative_name }}.{{ dns_name }}"
    type: A
    ttl: "{{ ttl }}"
    value: "{{ instance_eip.public_ip }}"
    overwrite: yes
  retries: 3
  delay: 5
  when: "instance.role == 'loadbalancer'"
